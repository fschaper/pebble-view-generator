#!/usr/bin/env node
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pebble = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"view_definition":3,"VIEW":4,"id":5,"optional_parameter":6,"BRACE_OPEN":7,"layer":8,"BRACE_CLOSE":9,"EOF":10,"LAYER":11,"position_and_dimension":12,"visibility":13,"ui_components":14,"subview":15,"SUBVIEW":16,"identifier":17,"inverter":18,"INVERTER":19,"bitmap":20,"BITMAP":21,"RESOURCE":22,"text":23,"TEXT":24,"string_or_var":25,"font_selection":26,"color_with_optional_background":27,"font":28,"FONT":29,"FONT_SELECTION":30,"ui_component":31,"SEMICOLON":32,"AS":33,"IDENTIFIER":34,"PARAMETERS":35,"POSITION_AND_DIMENSION":36,"VARIABLE":37,"STRING":38,"color":39,"ON":40,"COLOR_BLACK":41,"COLOR_WHITE":42,"COLOR_CLEAR":43,"HIDDEN":44,"$accept":0,"$end":1},
terminals_: {2:"error",4:"VIEW",7:"BRACE_OPEN",9:"BRACE_CLOSE",10:"EOF",11:"LAYER",16:"SUBVIEW",19:"INVERTER",21:"BITMAP",22:"RESOURCE",24:"TEXT",29:"FONT",30:"FONT_SELECTION",32:"SEMICOLON",33:"AS",34:"IDENTIFIER",35:"PARAMETERS",36:"POSITION_AND_DIMENSION",37:"VARIABLE",38:"STRING",40:"ON",41:"COLOR_BLACK",42:"COLOR_WHITE",43:"COLOR_CLEAR",44:"HIDDEN"},
productions_: [0,[3,7],[8,7],[8,4],[15,5],[18,4],[20,5],[23,7],[28,3],[26,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[14,1],[14,2],[5,2],[17,1],[6,0],[6,1],[12,1],[25,1],[25,1],[27,1],[27,3],[39,0],[39,1],[39,1],[39,1],[13,0],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        	context.name_in_camel_case = to_camel_case( context.name );
        	context.creators = code_stack;
        	context.destructors = destructor_stack;
        	context.identifiers = identifiers;
            context.root_layer_name = root_layer_name;

        	var header = render( this.$, 'generate.header', context );
        	var implementation = render( this.$, 'generate.implementation', context );

            var filename_header = context.name + '_view.h';
            var filename_implementation = context.name + '_view.c';

            console.log( 'creating header file \'' + filename_header + '\'' );
        	fs.writeFileSync( filename_header, header, 'utf8' );

            console.log( 'creating implementation file \'' + filename_implementation + '\'' );
        	fs.writeFileSync( filename_implementation, implementation, 'utf8' );

        	context = context_stack.pop();
        
break;
case 2:
        	if ( ! root_layer_name ) {
        		context.is_root_layer = true;
        		root_layer_name = context.name;
        	}
        	context.creators = code_stack;
        	code_stack = [];
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.push( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
        
break;
case 3: 
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.push( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
        
break;
case 4:
            context.view_name = $$[$0-3];
            context.view_name_in_camel_case = to_camel_case( context.view_name );
            code_stack.push( render( this.$, 'create', context ) );
            if( ! identifiers[ this.$ ] ) {
                identifiers[ this.$ ] = [];
            }
            identifiers[ this.$ ].push( { "type": context.view_name_in_camel_case, "name": context.name } );
            destructor_stack.unshift( render( this.$, 'destroy', context ) );
            context = context_stack.pop();            
        
break;
case 5:
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.unshift( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
        
break;
case 6:
        	context.resource_id = $$[$0-3];
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.unshift( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
        
break;
case 7:
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.unshift( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
        
break;
case 8:
			var regex = /^FONT/;
			context.internal_font = regex.test( $$[$0-1] );
			context.resource_id = $$[$0-1];			
        	code_stack.push( render( this.$, 'create', context ) );
        	if( ! identifiers[ this.$ ] ) {
        		identifiers[ this.$ ] = [];
        	}
       		identifiers[ this.$ ].push( context.name );
        	destructor_stack.unshift( render( this.$, 'destroy', context ) );
        	context = context_stack.pop();
		
break;
case 9:
            context.font = $$[$0];
            if ( identifiers[ '_global_' ][ $$[$0] ] == undefined ) {
                console.log( 'error: text object is referencing unknown font identifier \'' + $$[$0] + '\' in line ' + _$[$0].first_line );
            }
        
break;
case 18:
            context.name = $$[$0];
        	if ( identifiers[ '_global_' ][ context.name ] ) {
        		console.log( 'error: duplicate identifier \'' + context.name + '\' in line ' + _$[$0].first_line );
        	} 
            identifiers[ '_global_' ][ context.name ] = true;
        
break;
case 19:
            this.$ = $$[$0].substring( 1, $$[$0].length - 1 ); 
        
break;
case 21: 
			var regex = /\(\s*(.*?)\s*\)$/
			context.parameters = $$[$0].match( regex )[1];
		
break;
case 22:
			var regex = /\(\s*?width:(\d+)\s+height:(\d+)\s+top:(-?\d+)\s+left:(-?\d+)\s*?\)/;
			var match = $$[$0].match( regex );
			context.width = match[1];
			context.height = match[2];
			context.top = match[3];
			context.left = match[4];

            // preparation for later introduction of 'auto' support
            max_dimensions.width = Math.max( max_dimensions.width, context.left + context.width );
            max_dimensions.height = Math.max( max_dimensions.height, context.top + context.height );
		
break;
case 23: context.variable = $$[$0].substring( 1 ); 
break;
case 24: context.string = $$[$0].substring( 1, $$[$0].length - 1 ); 
break;
case 25: context.foreground = $$[$0]; 
break;
case 26:
        	context.foreground = $$[$0-2];
        	context.background = $$[$0];
        
break;
case 28: this.$ = 'GColorBlack'; 
break;
case 29: this.$ = 'GColorWhite'; 
break;
case 30: this.$ = 'GColorClear'; 
break;
case 32: context.hidden = true; 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,33:[1,4]},{6:5,7:[2,20],35:[1,6]},{17:7,34:[1,8]},{7:[1,9]},{7:[2,21],33:[2,21]},{7:[2,18],32:[2,18],35:[2,18],36:[2,18],44:[2,18]},{7:[2,19],32:[2,19],33:[2,19],35:[2,19],36:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19]},{8:10,11:[1,11]},{9:[1,12]},{5:13,33:[1,4]},{10:[1,14]},{12:15,36:[1,16]},{1:[2,1]},{7:[2,31],9:[2,31],13:17,32:[2,31],44:[1,18]},{7:[2,22],9:[2,22],30:[2,22],32:[2,22],44:[2,22]},{7:[1,19],9:[2,3],32:[2,3]},{7:[2,32],9:[2,32],32:[2,32]},{8:22,11:[1,11],14:20,15:27,16:[1,32],18:23,19:[1,28],20:25,21:[1,30],23:24,24:[1,29],28:26,29:[1,31],31:21},{8:22,9:[1,33],11:[1,11],15:27,16:[1,32],18:23,19:[1,28],20:25,21:[1,30],23:24,24:[1,29],28:26,29:[1,31],31:34},{9:[2,16],11:[2,16],16:[2,16],19:[2,16],21:[2,16],24:[2,16],29:[2,16]},{32:[1,35]},{32:[1,36]},{32:[1,37]},{32:[1,38]},{32:[1,39]},{32:[1,40]},{5:41,33:[1,4]},{25:42,37:[1,43],38:[1,44]},{22:[1,45]},{22:[1,46]},{17:47,34:[1,8]},{9:[2,2],32:[2,2]},{9:[2,17],11:[2,17],16:[2,17],19:[2,17],21:[2,17],24:[2,17],29:[2,17]},{9:[2,10],11:[2,10],16:[2,10],19:[2,10],21:[2,10],24:[2,10],29:[2,10]},{9:[2,11],11:[2,11],16:[2,11],19:[2,11],21:[2,11],24:[2,11],29:[2,11]},{9:[2,12],11:[2,12],16:[2,12],19:[2,12],21:[2,12],24:[2,12],29:[2,12]},{9:[2,13],11:[2,13],16:[2,13],19:[2,13],21:[2,13],24:[2,13],29:[2,13]},{9:[2,14],11:[2,14],16:[2,14],19:[2,14],21:[2,14],24:[2,14],29:[2,14]},{9:[2,15],11:[2,15],16:[2,15],19:[2,15],21:[2,15],24:[2,15],29:[2,15]},{12:48,36:[1,16]},{5:49,33:[1,4]},{33:[2,23]},{33:[2,24]},{5:50,33:[1,4]},{5:51,33:[1,4]},{6:52,33:[2,20],35:[1,6]},{13:53,32:[2,31],44:[1,18]},{12:54,36:[1,16]},{12:55,36:[1,16]},{32:[2,8]},{5:56,33:[1,4]},{32:[2,5]},{26:57,30:[1,58]},{13:59,32:[2,31],44:[1,18]},{13:60,32:[2,31],44:[1,18]},{27:61,32:[2,27],39:62,40:[2,27],41:[1,63],42:[1,64],43:[1,65],44:[2,27]},{17:66,34:[1,8]},{32:[2,6]},{32:[2,4]},{13:67,32:[2,31],44:[1,18]},{32:[2,25],40:[1,68],44:[2,25]},{32:[2,28],40:[2,28],44:[2,28]},{32:[2,29],40:[2,29],44:[2,29]},{32:[2,30],40:[2,30],44:[2,30]},{32:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],44:[2,9]},{32:[2,7]},{32:[2,27],39:69,41:[1,63],42:[1,64],43:[1,65],44:[2,27]},{32:[2,26],44:[2,26]}],
defaultActions: {14:[2,1],43:[2,23],44:[2,24],51:[2,8],53:[2,5],59:[2,6],60:[2,4],67:[2,7]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var mustache = require('mustache');
    var fs = require('fs');

    // used to store the name of the topmost layer, 
    // the one enclosing all other objects
    var root_layer_name = false;

    // will contain all the template generated allocation and initialization code. 
	var code_stack = [];
    // used to maintain a list of all identifiers with their type as a key.
    // Two text layers identified by 'identifier1' and 'identifier2' and one inverter layer identified 
    // as 'my_inverter_layer' would look somewhat like this:
    //     { text : [ 'identifier1', 'identifier2'], 
    //       inverter : [ 'my_inverter_layer'], 
    //       _global_ : { identifier1 : true, identifier2 : true, my_inverter_layer : true } 
    //     }
	var identifiers = {};
    // used to keep a list of all the identifiers used in the source file. Mainly for syntax sanity checks.
    identifiers['_global_'] = {};

    // will contain all the template generated code for freeing the objects
	var destructor_stack = [];

	var context_stack = [];
	var context = {};
    // not currently in use - will later support a 'auto' option for layer dimensions based on their child elements.
    var max_dimensions = {};

	function render( template, method, context ) {
		return mustache.render( fs.readFileSync( __dirname + '/../template/' + template + '.' + method + '.mustache', 'utf8'), context );
	}

	function to_camel_case( string ) {
	  return string.replace(/^.|_./g, function( char, index) {
	    return index == 0 ? char.toUpperCase() : char.substr(1).toUpperCase();
	  });
	}

	function context_push() {
		context_stack.push( context );
		context = {};
	}
 
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: context_push(); return 4; 
break;
case 3: context_push(); return 16; 
break;
case 4: context_push(); return 11; 
break;
case 5: context_push(); return 21; 
break;
case 6: context_push(); return 24; 
break;
case 7: context_push(); return 29; 
break;
case 8: context_push(); return 19; 
break;
case 9: return 33; 
break;
case 10: return 34; 
break;
case 11: return 37; 
break;
case 12: return 38; 
break;
case 13: return 22; 
break;
case 14: return 7; 
break;
case 15: return 9; 
break;
case 16: return 36; 
break;
case 17: return 41; 
break;
case 18: return 42; 
break;
case 19: return 43; 
break;
case 20: return 44; 
break;
case 21: return 40; 
break;
case 22: return 35; 
break;
case 23: return 30 
break;
case 24: return 32; 
break;
case 25: return 10; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:#.*\n?)/,/^(?:view\b)/,/^(?:subview\b)/,/^(?:layer\b)/,/^(?:bitmap\b)/,/^(?:text\b)/,/^(?:font\b)/,/^(?:inverter\b)/,/^(?:as\b)/,/^(?:'([a-zA-Z_]+[a-zA-Z0-9_]*?)')/,/^(?:\$([a-zA-Z_]+[a-zA-Z0-9]*((->|\.)[a-zA-Z_]+[a-zA-Z0-9]*)?))/,/^(?:"(\\"|[^"])*?")/,/^(?:([A-Z]+[_A-Z0-9]*))/,/^(?:\[)/,/^(?:\])/,/^(?:\(\s*?width:(\d+)\s+height:(\d+)\s+top:(\d+)\s+left:(\d+)\s*?\))/,/^(?:black\b)/,/^(?:white\b)/,/^(?:clear\b)/,/^(?:hidden\b)/,/^(?:on\b)/,/^(?:with parameters \([^)]*\))/,/^(?:using font\b)/,/^(?:;)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pebble;
exports.Parser = pebble.Parser;
exports.parse = function () { return pebble.parse.apply(pebble, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}